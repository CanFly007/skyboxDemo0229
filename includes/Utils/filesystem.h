#ifndef FILESYSTEM_H
#define FILESYSTEM_H

#include <string>
#include <cstdlib>
#include "root_directory.h" // This is a configuration file generated by CMake.
#include <vector>
#include <filesystem>

class FileSystem
{
private:
  typedef std::string (*Builder) (const std::string& path);

public:
  static std::string getPath(const std::string& path)
  {
    static std::string(*pathBuilder)(std::string const &) = getPathBuilder();
    return (*pathBuilder)(path);
  }

  static std::vector<std::string> getFilesWithExtension(const std::string& directory, const std::string& extension = ".jpg")
  {
      std::vector<std::string> files;
      std::filesystem::path root_path = getRoot();
      std::filesystem::path path_to_scan = std::filesystem::path(getRoot()) / directory;

      if (std::filesystem::exists(path_to_scan) && std::filesystem::is_directory(path_to_scan)) 
      {
          for (const auto& entry : std::filesystem::directory_iterator(path_to_scan)) 
          {
              if (entry.is_regular_file() && entry.path().extension() == extension) 
              {
                  std::filesystem::path relative_path = std::filesystem::relative(entry.path(), root_path);
                  files.push_back(relative_path.string());
                  
                  //return relative path
                  //files.push_back(entry.path().string());
              }
          }
      }
      return files;
  }

private:
  static std::string const & getRoot()
  {
    static char const * envRoot = getenv("LOGL_ROOT_PATH");
    static char const * givenRoot = (envRoot != nullptr ? envRoot : logl_root);
    static std::string root = (givenRoot != nullptr ? givenRoot : "");
    return root;
  }

  //static std::string(*foo (std::string const &)) getPathBuilder()
  static Builder getPathBuilder()
  {
    if (getRoot() != "")
      return &FileSystem::getPathRelativeRoot;
    else
      return &FileSystem::getPathRelativeBinary;
  }

  static std::string getPathRelativeRoot(const std::string& path)
  {
    return getRoot() + std::string("/") + path;
  }

  static std::string getPathRelativeBinary(const std::string& path)
  {
    return "../../../" + path;
  }


};

// FILESYSTEM_H
#endif
