#version 430 core

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0) uniform sampler2D environmentMap;
layout(std430, binding = 1) buffer BrightestSpotData
{
    float threshold;
};

shared uint localHistogram[256];

void main()
{
    if (gl_LocalInvocationIndex < 256)
    {
        localHistogram[gl_LocalInvocationIndex] = 0;
    }
    barrier();

    ivec2 texSize = textureSize(environmentMap, 0);
    ivec2 id = ivec2(gl_GlobalInvocationID.xy);

    if (id.x < texSize.x && id.y < texSize.y)
    {
        vec4 color = texelFetch(environmentMap, id, 0);
        float luminance = dot(color.rgb, vec3(0.2126, 0.7152, 0.0722));
        uint bin = uint(luminance * 255.0);

        atomicAdd(localHistogram[bin], 1);
    }
    barrier();

    if (gl_LocalInvocationIndex == 0)
    {
        uint total = texSize.x * texSize.y;
        float sumB = 0;
        uint wB = 0;
        float maxVar = 0.0;
        float sum1 = 0.0;
        for (int i = 0; i < 256; i++) 
            sum1 += float(i) * float(localHistogram[i]);

        for (int t = 0; t < 256; t++)
        {
            wB += localHistogram[t]; // Weight Background
            if (wB == 0) 
                continue;

            uint wF = total - wB; // Weight Foreground
            if (wF == 0)
                break;

            sumB += float(t) * float(localHistogram[t]);

            float mB = sumB / wB; // Mean Background
            float mF = (sum1 - sumB) / wF; // Mean Foreground

            float varBetween = float(wB) * float(wF) * (mB - mF) * (mB - mF);

            if (varBetween > maxVar)
            {
                maxVar = varBetween;
                threshold = float(t) / 255.0;
            }
        }
    }
}